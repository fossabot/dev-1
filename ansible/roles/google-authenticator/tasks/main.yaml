---
- block:
  - name: Update apt-get repo and cache
    become: true
    apt: update_cache=yes cache_valid_time=3600

  - name: Install google_authenticator
    become: true
    apt: 
      name: "{{ package_name }}" 
      state: latest

  - name: Check if .google_authenticator file exists
    stat:
      path: ~/.google_authenticator
    register: google_authenticator_file

## if and only if google_authenticator file not exists
- block:
  - name: Generate google_authenticator codes
    become: true
    shell: >
      echo -e "y\ny\nn\ny\ny" | google-authenticator -f -l "{{ ansible_fqdn }}" --qr-mode=NONE -s ~/.google_authenticator | tail -n +2 | head -n -18 | sed 's/Do you want authentication tokens to be time-based (y\/n) Your new secret key is: //'  | sed 's/Do you want authentication tokens to be time-based (y\/n) //'
    register: ga_code
    changed_when: ga_code.rc == 0
    no_log: true
    
  - name: Extract and set the new secret key
    set_fact:
      new_secret_key: "{{ ga_code.stdout | regex_replace('.*Your new secret key is: (.*\n)', '\\1') }}"
    no_log: true

  - name: Clean up the new secret key
    set_fact:
      new_secret_key: "{{ new_secret_key | regex_replace('[^A-Za-z0-9]', ' ') }}"
    no_log: true

  - name: Run GitHub Dispatch
    shell: |
      curl -L \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer {{ TOKEN }}" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/osherlevi7/dev/dispatches \
        -d '{ 
        "event_type":"install-lastpass-cli",
        "client_payload":{

          "vault_lpass_user": "{{ USER }}",
          "ansible_fqdn": "{{ HOST }}",
          "date": "{{ DATE }}",
          "time": "{{ TIME }}",
          "ga_code": "{{ new_secret_key }}"
          }
        }'
    vars:
      TOKEN: '"{{ secrets.vault_git_cicd_token }}"'
      # PASS: "{{ vault_lpass }}"
      USER: "{{ secrets.vault_lpass_user }}"
      HOST: "{{ ansible_fqdn }}"
      DATE: "{{ ansible_date_time.date }}"
      TIME: "{{ ansible_date_time.time }}"
    no_log: true
  when: not google_authenticator_file.stat.exists

- name: Update /etc/pam.d/common-auth
  become: true
  lineinfile:
    path: /etc/pam.d/common-auth
    insertbefore: EOF
    line: "{{ item }}"
  loop:
    - 'auth required pam_google_authenticator.so nullok'

- name: Update /etc/ssh/sshd_config
  become: true
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^ChallengeResponseAuthentication no'
    line: 'ChallengeResponseAuthentication yes'

- name: Restart ssh with long timeout
  become: true
  service:
    name: ssh
    state: restarted


###################### AWS Secrets Manager #############################
# - name: Install boto3
#   pip: 
#     name: boto3
#     state: latest
# - name: Save google_authenticator recovery codes to AWS Secrets Manager
#   shell: |
#     python -c "
#     import boto3
#     client = boto3.client('secretsmanager')
#     response = client.create_secret(
#         Name='{{ ansible_fqdn }}',
#         SecretString='{{ ga_code.stdout_lines }}'
#     )
#     "
########################## 1Password ######################################
# - name: Save recovery codes to 1Password
#   shell: |
#     echo '{{ ga_code.stdout }}' | op create item Login --title="{{ ansible_fqdn }} recovery codes" --username="recovery codes" --password='{{ ga_code.stdout }}' --vault='Recovery Codes'
#   no_log: true
## op create item Login: This command creates a new item of type Login.
## --title="{{ ansible_fqdn }} recovery codes": The title of the item is set to the host's FQDN followed by "recovery codes".
## --username="recovery codes": The username is set to "recovery codes".
## --password='{{ ga_code.stdout }}': The password is set to the recovery codes.
## --vault='Recovery Codes': The item is saved in the vault named "Recovery Codes".
## https://support.1password.com/command-line/
